#!/usr/bin/env python3

import os
import sys
import configparser
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QLabel, QLineEdit, QPushButton, QComboBox, QFileDialog, QMessageBox, QWidget
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt


class WebAppCreator(QMainWindow):
    def __init__(self):
        super().__init__()

        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Creador de WebApps")
        self.setWindowIcon(QIcon("webapp_manager.ico"))

        self.resize(400, 400)

        central_widget = QWidget()
        layout = QVBoxLayout()

        self.app_name_label = QLabel("Nombre de la WebApp:")
        self.app_name_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.app_name_label)

        self.app_name_input = QLineEdit()
        layout.addWidget(self.app_name_input)

        self.app_url_label = QLabel("URL de la WebApp (formato https://):")
        self.app_url_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.app_url_label)

        self.app_url_input = QLineEdit()
        layout.addWidget(self.app_url_input)

        self.app_icon_label = QLabel("Ícono de la WebApp:")
        self.app_icon_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.app_icon_label)

        self.app_icon_input = QLineEdit()
        layout.addWidget(self.app_icon_input)

        self.select_icon_button = QPushButton("Seleccionar ícono")
        self.select_icon_button.clicked.connect(self.select_icon)
        layout.addWidget(self.select_icon_button)

        self.browser_label = QLabel("Navegador a utilizar:")
        self.browser_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.browser_label)

        self.browser_combo_box = QComboBox()
        self.browser_combo_box.addItem("Google Chrome", "/usr/bin/google-chrome-stable --app=")
        self.browser_combo_box.addItem("Microsoft Edge", "/usr/bin/microsoft-edge-stable --app=")
        self.browser_combo_box.addItem("Brave Browser", "/usr/bin/brave-browser-stable --app=")
        self.browser_combo_box.addItem("Deepin Browser", "/usr/bin/browser --no-fuser --app=")
        self.browser_combo_box.addItem("Opera Web Browser", "/usr/bin/opera --app=")
        self.browser_combo_box.addItem("Vivaldi", "/usr/bin/vivaldi-stable --app=")
        layout.addWidget(self.browser_combo_box)

        self.create_button = QPushButton("Crear WebApp")
        self.create_button.clicked.connect(self.create_webapp)
        layout.addWidget(self.create_button)

        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

    def select_icon(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getOpenFileName(self, "Seleccionar ícono", "", "Imágenes (*.png *.xpm *.jpg *.bmp);;Todos los archivos (*)", options=options)
        if file_name:
            self.app_icon_input.setText(file_name)

    def create_webapp(self):
        app_name = self.app_name_input.text()
        app_url = self.app_url_input.text()
        app_icon = self.app_icon_input.text()
        browser_exec = self.browser_combo_box.currentData()

        browser_exec = f"{browser_exec}{app_url}"

        config = configparser.ConfigParser()
        config.optionxform = str
        config["Desktop Entry"] = {
            "Type": "Application",
            "Name": app_name,
            "Comment": f"{app_name} WebApp",
            "Exec": browser_exec,
            "Icon": app_icon,
            "Terminal": "false",
            "Categories": "Network;WebBrowser;",
        }

        desktop_file_path = os.path.join(os.path.expanduser("~"), ".local", "share", "applications", f"{app_name}.desktop")
        with open(desktop_file_path, "w") as desktop_file:
            config.write(desktop_file)

        os.chmod(desktop_file_path, os.stat(desktop_file_path).st_mode | 0o111)

        QMessageBox.information(self, "WebApp creada", f"WebApp creada y guardada en {desktop_file_path}")


def main():
    app = QApplication(sys.argv)

    creator = WebAppCreator()
    creator.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
